stages:
  check_drift:
    cmd: >
      python drift_detection/check_drift_batch.py
      --models-dir drift_detection/drift_models
    deps:
      - drift_detection/check_drift_batch.py
      - drift_detection/load_drift_detector.py
      - drift_detection/database.py
      - drift_detection/drift_models/drift_detector.joblib
      - drift_detection/drift_models/feature_extractor.pth
    outs:
      - drift_check_report.json:
          cache: false
    always_changed: true  # Run this every time because we always want to check for new drifted images

  prepare_data:
    cmd: >
      python -m prepare_retrain_data 
      --data-dir ${data_dir} 
      --max-drifted ${max_drifted}
      --min-drifted ${min_drifted}
      --batch-size ${batch_size} 
      --generate-stats
      --save-datasets prepared_datasets.pkl
    deps:
      - prepare_retrain_data.py
      - ${data_dir}
      - drift_check_report.json  # Add dependency on the drift check output
    params:
      - data_dir
      - max_drifted
      - min_drifted
      - batch_size
    outs:
      - prepared_data_stats.json:
          cache: false
      - prepared_datasets.pkl:
          cache: true
          persist: true
    always_changed: false

  train:
    cmd: >
      python -m retrain
      --load-datasets prepared_datasets.pkl
      --epochs ${epochs}
      --learning-rate ${learning_rate}
      --freeze-strategy ${freeze_strategy}
      --dropout-rate ${dropout_rate}
      --experiment-name ${mlflow_experiment_name}
    deps:
      - retrain.py
      - prepared_datasets.pkl
      - prepared_data_stats.json  # Also depend on the stats file to check if training should be skipped
    params:
      - epochs
      - learning_rate
      - freeze_strategy
      - dropout_rate
      - mlflow_experiment_name
    outs:
      - models: # Track the entire models directory
          cache: true
          persist: true
    frozen: false

  evaluate:
    cmd: >
      python -m test_model
      --load-datasets prepared_datasets.pkl
      --num-classes 10
      --dropout-rate ${dropout_rate}
      --experiment-name ${mlflow_experiment_name}_eval
      $([[ "${update_db_status}" = "true" ]] && echo "--update-db-status" || echo "")
    deps:
      - test_model.py
      - models # Depend on the entire models directory
    params:
      - dropout_rate
      - mlflow_experiment_name
      - update_db_status
    outs:
      - test_results.json:
          cache: false