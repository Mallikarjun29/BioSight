name: Drift Detection and Retraining Pipeline

on:
  push:
    branches: [ main ] # Trigger on pushes to the main branch
    paths: # Only trigger if files in these paths change
      - 'drift_detection_and_retraining_pipeline/**'
      - '.github/workflows/drift_pipeline.yml'
  workflow_dispatch: # Allow manual triggering from the Actions tab

# Define thresholds for checks (Ideally, read from params.yaml or config)
env:
  MIN_DRIFTED_IMAGES_THRESHOLD: 5 # Example: Minimum drifted images needed to proceed with retraining
  MIN_ACCURACY_THRESHOLD: 50.0    # Example: Minimum test accuracy required for the retrained model
  # Define the pipeline directory for easier path management
  PIPELINE_DIR: drift_detection_and_retraining_pipeline

jobs:
  detect_and_retrain:
    runs-on: nvidia/cuda:12.3.2-cudnn8-devel-ubuntu22.04
    container:
      image: catthehacker/ubuntu:act-latest
      options: --gpus all --runtime=nvidia --shm-size=8g # Increase shared memory size if needed
    # Removed defaults.run.working-directory

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate DVC checks if needed

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Or your project's Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Path to requirements.txt relative to repo root
          REQUIREMENTS_FILE="${PIPELINE_DIR}/requirements.txt"
          if [ -f "$REQUIREMENTS_FILE" ]; then
            pip install -r "$REQUIREMENTS_FILE"
          else
            echo "Warning: $REQUIREMENTS_FILE not found."
          fi
          # Install DVC
          pip install dvc
          # Install jq for parsing JSON report
          sudo apt-get update && sudo apt-get install -y jq

      # --- Optional: Configure DVC Remote Credentials ---
      # (Keep this section as before if needed)

      # - name: Pull DVC data and models
      #   run: dvc pull --force # Pull data/models tracked by DVC

      - name: Train Drift Detector Models
        run: |
          echo "Running drift detector training script..."
          # Path relative to repo root
          python ${PIPELINE_DIR}/drift_detection/train_drift.py
          # This script should save models relative to its location, e.g.,
          # ${PIPELINE_DIR}/drift_detection/drift_models/...

      - name: Run Drift Detection Stage (Manual Check)
        id: drift_detection
        run: |
          echo "Running drift detection script (check_drift stage)..."
          # Paths relative to repo root
          MODELS_DIR="${PIPELINE_DIR}/drift_detection/drift_models"
          REPORT_FILE="${PIPELINE_DIR}/drift_check_report.json"
          python ${PIPELINE_DIR}/drift_detection/check_drift_batch.py --models-dir "$MODELS_DIR" --output-report "$REPORT_FILE"

          echo "Checking drift report..."
          if [ ! -f "$REPORT_FILE" ]; then
             echo "::error::Drift report file $REPORT_FILE not found!"
             exit 1
          fi
          # Check the report file to set an output flag
          drift_count=$(jq '.drift_detected_count // 0' "$REPORT_FILE") # Default to 0 if key missing
          if [ "$drift_count" -gt 0 ]; then
            echo "DRIFT DETECTED ($drift_count images) based on $REPORT_FILE"
            echo "drift_detected=true" >> $GITHUB_OUTPUT
          else
            echo "NO DRIFT DETECTED based on $REPORT_FILE"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
          fi
        # Fail the job if drift detection script fails
        continue-on-error: false

      - name: Run DVC Prepare Data Stage
        id: prepare_data
        if: steps.drift_detection.outputs.drift_detected == 'true'
        continue-on-error: true
        run: |
          echo "Running dvc repro prepare_data..."
          # Change directory to run dvc repro in the context of dvc.yaml
          cd ${PIPELINE_DIR}
          dvc repro prepare_data
          # Change back if needed, though subsequent steps also cd
          # cd ..

      - name: Check Prepared Data (Quality Gate 1)
        id: check_prepared_data
        if: steps.drift_detection.outputs.drift_detected == 'true'
        run: |
          echo "Checking prepared data statistics..."
          # Check outcome from the previous step
          if [ "${{ steps.prepare_data.outcome }}" == "failure" ]; then
             echo "::error::DVC prepare_data stage failed. Check logs."
             exit 1
          fi

          # Path to stats file relative to repo root
          STATS_FILE="${PIPELINE_DIR}/prepared_data_stats.json"
          if [ ! -f "$STATS_FILE" ]; then
            echo "::error::$STATS_FILE not found after prepare_data stage."
            exit 1
          fi

          # Check if enough drifted images were included
          drifted_included=$(jq '.drifted_images_included // 0' "$STATS_FILE") # Default to 0
          echo "Drifted images included in prepared data: $drifted_included"
          echo "Minimum required: ${{ env.MIN_DRIFTED_IMAGES_THRESHOLD }}"

          if [ "$drifted_included" -lt "${{ env.MIN_DRIFTED_IMAGES_THRESHOLD }}" ]; then
            echo "::warning::Insufficient drifted images included ($drifted_included < ${{ env.MIN_DRIFTED_IMAGES_THRESHOLD }}). Skipping retraining."
            echo "proceed_with_retrain=false" >> $GITHUB_OUTPUT
          else
            echo "Sufficient drifted images included. Proceeding with retraining."
            echo "proceed_with_retrain=true" >> $GITHUB_OUTPUT
          fi

      - name: Run DVC Train Stage
        if: steps.check_prepared_data.outputs.proceed_with_retrain == 'true'
        run: |
          echo "Running dvc repro train..."
          # Change directory to run dvc repro
          cd ${PIPELINE_DIR}
          dvc repro train

      - name: Run DVC Evaluate Stage
        id: evaluate_model
        if: steps.check_prepared_data.outputs.proceed_with_retrain == 'true'
        continue-on-error: true
        run: |
          echo "Running dvc repro evaluate..."
          # Change directory to run dvc repro
          cd ${PIPELINE_DIR}
          dvc repro evaluate

      - name: Check Evaluation Results (Quality Gate 2)
        if: steps.check_prepared_data.outputs.proceed_with_retrain == 'true'
        run: |
          echo "Checking evaluation results..."
          # Check outcome from the previous step
          if [ "${{ steps.evaluate_model.outcome }}" == "failure" ]; then
             echo "::error::DVC evaluate stage failed. Check logs."
             exit 1
          fi

          # Path to results file relative to repo root
          RESULTS_FILE="${PIPELINE_DIR}/test_results.json"
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "::error::$RESULTS_FILE not found after evaluate stage."
            exit 1
          fi

          # Check if accuracy meets threshold
          accuracy=$(jq '.accuracy // 0' "$RESULTS_FILE") # Default to 0
          echo "Model test accuracy: $accuracy"
          echo "Minimum required: ${{ env.MIN_ACCURACY_THRESHOLD }}"

          # Use awk for floating point comparison
          if awk -v acc="$accuracy" -v min_acc="${{ env.MIN_ACCURACY_THRESHOLD }}" 'BEGIN { exit !(acc >= min_acc) }'; then
            echo "Accuracy threshold met ($accuracy >= ${{ env.MIN_ACCURACY_THRESHOLD }})."
          else
            echo "::error::Accuracy threshold NOT met ($accuracy < ${{ env.MIN_ACCURACY_THRESHOLD }})."
            exit 1 # Fail the job if accuracy is too low
          fi

      # --- Optional: Commit and Push Results ---
      # (Adjust paths for git add relative to repo root)
      # - name: Commit and Push Changes
      #   if: steps.check_prepared_data.outputs.proceed_with_retrain == 'true'
      #   run: |
      #     git config --global user.name 'github-actions[bot]'
      #     ...
      #     # Paths relative to repo root
      #     git add ${PIPELINE_DIR}/dvc.lock ${PIPELINE_DIR}/drift_check_report.json ${PIPELINE_DIR}/prepared_data_stats.json ${PIPELINE_DIR}/test_results.json ${PIPELINE_DIR}/params.yaml ${PIPELINE_DIR}/models.dvc
      #     ...